#!/usr/bin/env node

/**
 * RNC Malaysia Backend Deployment Script for Render
 * This script helps prepare and deploy the backend to Render.com
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ RNC Malaysia Backend Deployment to Render');
console.log('='.repeat(50));

// Check if we're in the right directory
const requiredFiles = ['server.js', 'package.json', 'render.yaml'];
const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));

if (missingFiles.length > 0) {
  console.error('‚ùå Missing required files:', missingFiles.join(', '));
  console.error('Please run this script from the project root directory.');
  process.exit(1);
}

console.log('‚úÖ All required files found');

// Check Node.js version
const nodeVersion = process.version;
console.log(`üìã Node.js version: ${nodeVersion}`);

// Read package.json to verify dependencies
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
console.log(`üì¶ Project: ${packageJson.name} v${packageJson.version}`);

// Check if git repository is initialized
let gitStatus = 'Not initialized';
try {
  execSync('git status', { stdio: 'pipe' });
  gitStatus = 'Initialized';
  
  // Check if there are uncommitted changes
  const gitStatusOutput = execSync('git status --porcelain', { encoding: 'utf8' });
  if (gitStatusOutput.trim()) {
    console.log('‚ö†Ô∏è  You have uncommitted changes. Consider committing them before deployment.');
  } else {
    console.log('‚úÖ Git repository is clean');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  Git repository not initialized. Render requires a Git repository.');
}

console.log(`üìÅ Git status: ${gitStatus}`);

// Verify environment configuration
console.log('\nüîß Environment Configuration Check:');
console.log('‚úÖ render.yaml configured');
console.log('‚úÖ .env.production template created');
console.log('‚úÖ Production scripts ready');

// Display deployment instructions
console.log('\nüìã DEPLOYMENT INSTRUCTIONS:');
console.log('='.repeat(30));

console.log('\n1Ô∏è‚É£ PREPARE GIT REPOSITORY:');
if (gitStatus === 'Not initialized') {
  console.log('   git init');
  console.log('   git add .');
  console.log('   git commit -m "Initial commit for Render deployment"');
} else {
  console.log('   git add .');
  console.log('   git commit -m "Prepare for Render deployment"');
}

console.log('\n2Ô∏è‚É£ PUSH TO GITHUB/GITLAB:');
console.log('   - Create a new repository on GitHub or GitLab');
console.log('   - git remote add origin <your-repository-url>');
console.log('   - git branch -M main');
console.log('   - git push -u origin main');

console.log('\n3Ô∏è‚É£ DEPLOY ON RENDER:');
console.log('   1. Go to https://render.com and sign up/login');
console.log('   2. Click "New +" ‚Üí "Web Service"');
console.log('   3. Connect your GitHub/GitLab repository');
console.log('   4. Select your RNC project repository');
console.log('   5. Render will auto-detect the render.yaml configuration');

console.log('\n4Ô∏è‚É£ CONFIGURE ENVIRONMENT VARIABLES:');
console.log('   In Render dashboard, add these environment variables:');
console.log('   - MONGODB_URI: Your MongoDB Atlas connection string');
console.log('   - JWT_SECRET: Will be auto-generated by Render');
console.log('   - JWT_REFRESH_SECRET: Will be auto-generated by Render');
console.log('   - All other variables are pre-configured in render.yaml');

console.log('\n5Ô∏è‚É£ UPDATE FRONTEND CONFIGURATION:');
console.log('   After deployment, update your frontend .env.production:');
console.log('   REACT_APP_API_URL=https://your-render-app-name.onrender.com/api');

console.log('\nüéØ EXPECTED DEPLOYMENT URL:');
console.log('   https://rnc-malaysia-api.onrender.com');
console.log('   (or similar based on availability)');

console.log('\n‚úÖ VERIFICATION STEPS:');
console.log('   1. Check health endpoint: https://your-app.onrender.com/health');
console.log('   2. Test login endpoint: https://your-app.onrender.com/api/auth/login');
console.log('   3. Update frontend and test production login');

console.log('\nüîê TEST CREDENTIALS:');
console.log('   Admin: admin@refugeenetwork.com / 123456');
console.log('   User: test@example.com / 123456');

console.log('\nüìû SUPPORT:');
console.log('   - Render Documentation: https://render.com/docs');
console.log('   - MongoDB Atlas: https://docs.atlas.mongodb.com/');
console.log('   - Project GitHub Issues: Create an issue if you need help');

console.log('\nüéâ Ready for deployment!');
console.log('Follow the steps above to deploy your backend to Render.');

// Check if we can run a quick test
console.log('\nüß™ QUICK LOCAL TEST:');
try {
  console.log('Testing local server startup...');
  const testProcess = execSync('timeout 5 npm start', { 
    stdio: 'pipe',
    timeout: 6000 
  });
  console.log('‚úÖ Server starts successfully');
} catch (error) {
  if (error.code === 'TIMEOUT' || error.signal === 'SIGTERM') {
    console.log('‚úÖ Server starts successfully (timeout expected)');
  } else {
    console.log('‚ö†Ô∏è  Server startup test failed. Check your configuration.');
    console.log('Error:', error.message);
  }
}

console.log('\n' + '='.repeat(50));
console.log('üöÄ Deployment preparation complete!');
